from bigram_image_generator import process_exe_file
from bigram_image_generator import is_executable
import os


COUNT_LIMIT = 100

def process_directory(input_directory, output_directory):
    # Ensure the output directory exists
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    # Iterate through all files in the input directory
    files_checked_counter = 0
    for filename in os.listdir(input_directory):
        file_path = os.path.join(input_directory, filename)

        # Check if the file is an executable (by signature, not extension)
        if os.path.isfile(file_path) and is_executable(file_path):
            files_checked_counter += 1
            output_image_path = os.path.join(output_directory, f"{os.path.splitext(filename)[0]}.png")

            # Generate bigram image for the executable file
            result = process_exe_file(file_path, output_image_path,min_file_size=1024**2 ,set_count_limit=True, count_limit=COUNT_LIMIT)
            
            # If result is False, processing limit is reached, so break the loop
            if result is False:
                print("Processing stopped due to limit.")
                break

            # If result is None, the file was skipped (too small, flat image), continue
            if result is not None:
                print(f"Image saved to {output_image_path}")
            
            print(f"Files checked: {files_checked_counter}")


if __name__ == "__main__":
    input_directory = ""
    output_directory = ""
    
    process_directory(input_directory, output_directory)
